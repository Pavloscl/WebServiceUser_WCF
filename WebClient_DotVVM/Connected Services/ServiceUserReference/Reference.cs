//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceUserReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/WebServiceUsers_WCF.DTOs")]
    public partial class UserDTO : object
    {
        
        private System.DateTime EnrollmentDateField;
        
        private string FirstNameField;
        
        private int IdField;
        
        private string LastNameField;
        
        private string PasswordField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EnrollmentDate
        {
            get
            {
                return this.EnrollmentDateField;
            }
            set
            {
                this.EnrollmentDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceUserReference.IWebServiceUser")]
    public interface IWebServiceUser
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWebServiceUser/Get", ReplyAction="http://Microsoft.ServiceModel.Samples/IWebServiceUser/GetResponse")]
        System.Threading.Tasks.Task<ServiceUserReference.UserDTO[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWebServiceUser/GetUserById", ReplyAction="http://Microsoft.ServiceModel.Samples/IWebServiceUser/GetUserByIdResponse")]
        System.Threading.Tasks.Task<ServiceUserReference.UserDTO> GetUserByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWebServiceUser/InsertUser", ReplyAction="http://Microsoft.ServiceModel.Samples/IWebServiceUser/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(ServiceUserReference.UserDTO User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWebServiceUser/UpdateUser", ReplyAction="http://Microsoft.ServiceModel.Samples/IWebServiceUser/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(ServiceUserReference.UserDTO User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWebServiceUser/DeleteUser", ReplyAction="http://Microsoft.ServiceModel.Samples/IWebServiceUser/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IWebServiceUserChannel : ServiceUserReference.IWebServiceUser, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WebServiceUserClient : System.ServiceModel.ClientBase<ServiceUserReference.IWebServiceUser>, ServiceUserReference.IWebServiceUser
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WebServiceUserClient() : 
                base(WebServiceUserClient.GetDefaultBinding(), WebServiceUserClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWebServiceUser.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceUserClient(EndpointConfiguration endpointConfiguration) : 
                base(WebServiceUserClient.GetBindingForEndpoint(endpointConfiguration), WebServiceUserClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceUserClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WebServiceUserClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceUserClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WebServiceUserClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceUserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceUserReference.UserDTO[]> GetAsync()
        {
            return base.Channel.GetAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceUserReference.UserDTO> GetUserByIdAsync(int Id)
        {
            return base.Channel.GetUserByIdAsync(Id);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(ServiceUserReference.UserDTO User)
        {
            return base.Channel.InsertUserAsync(User);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(ServiceUserReference.UserDTO User)
        {
            return base.Channel.UpdateUserAsync(User);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int Id)
        {
            return base.Channel.DeleteUserAsync(Id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWebServiceUser))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWebServiceUser))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:49374/WebServiceUser.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WebServiceUserClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWebServiceUser);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WebServiceUserClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWebServiceUser);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWebServiceUser,
        }
    }
}
